<?php
/**
 * Return path to thumbnail directory.
 *
 * @return
 *   String. Path to directory with thumbnails.
 */
function node_thumb_directory() {
  return file_directory_path() . variable_get('node_thumbs_directory', '');
}

/**
 * Return thumb for given node
 *
 * @param $node
 *   Node object for which we want to thumbnail
 * @return
 *   Object. Thumbnail for given node.
 */
function node_thumb_load($node) {
  $thumbnail = db_fetch_object(db_query('SELECT image FROM {node_thumbs} WHERE nid = %d', $node->nid));
  return node_thumb_directory() . '/' . $thumbnail->image;
}

/**
 * Save thumb for given node
 *
 * @param $node
 *   Node object with thumbnail
 * @return
 *   Object. Thumbnail for given node.
 */
function node_thumb_save($node) {
  db_query('INSERT INTO {node_thumbs} (nid, image) VALUES (%d, "%s");', $node->nid, basename($node->thumbnail));
}

/**
 * Delete thumb for given node
 *
 * @param $node
 *   Node object with thumbnail
 * @return
 *   Object. Thumbnail for given node.
 */
function node_thumb_delete($node) {
  db_query('DELETE FROM {node_thumbs} WHERE nid=%d;', $node->nid);
}

      

/**
 * Return all thumbnails
 *
 * @param $key
 *    @see file_scan_directory
 * @return
 *   Array of file objects
 */
function node_thumb_all($key = 'filename') {  
  $options = array();
  if (variable_get('node_thumbs_directory', '')) {
    $options = file_scan_directory(node_thumb_directory($key), '.*');
  }
  return $options;  
}

/**
 * Return promoted thumbnails
 *
 * @see file_scan_directory()
 * @see node_thumb_all()
 */
function node_thumb_promoted($key = 'filename') {
  $key = (in_array($key, array('filename', 'basename', 'name')) ? $key : 'filename');
  $promoted = (array)variable_get('node_thumbs_promoted', array());

  $options = array();
  if ($promoted) {
    foreach ($promoted as $file) {
      $filename = $file;
      $basename = basename($file);
      $name = substr($basename, 0, strrpos($basename, '.'));
      $options[$$key] = new stdClass();
      $options[$$key]->filename = $filename;
      $options[$$key]->basename = $basename;
      $options[$$key]->name = $name;
    }
  } else {
    $options = node_thumb_all();   
  }
  return $options;
}

function node_thumb_form($form_state, $which = 'all', $type = 'radios') {
  $files = array();
  $options = array();
  $default = '';  
  
  if ($thumbnail = $form_state->thumbnail) {
    $default = $thumbnail;
  } elseif ($type == 'checkboxes') {
    $default = variable_get('node_thumbs_promoted', array());
  }
  if ($which == 'all') {
    $files = node_thumb_all();
  } else {
    $files = node_thumb_promoted();
  }
  foreach ($files as $file) {
    $options[$file->filename] = theme('image', $file->filename, check_plain($file->basename), check_plain($file->name));
  }
  $form = array(
    '#type' => $type,
    '#title' => t('Proponowane miniaturki.'),
    '#options' => $options,
    '#default_value' => $default,
    '#description' => t('Wybierz miniaturkę najlepiej pasującą do treści wiadomości.'),
    '#prefix' => '<div id="node-thumb-gallery">',
    '#suffix' => '</div>',
  );
  return $form;
}

/**
 * Builds and returns the thumbnails settings form.
 */
function node_thumb_admin($form_state) {
  $form = array();
  $form['#after_build'] = array_merge((array)$form['#after_build'], array('node_thumb_add_css'));
  $form['directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Katalog'),
    '#description' => t('Ścieżka do katalogu z obrazkami powiązanymi z  %directory.', array('%directory' => file_directory_path())),
    '#default_value' => variable_get('node_thumbs_directory', '')
  );
  $form['promoted'] = node_thumb_form(NULL, 'all', 'checkboxes');
  $form['content_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Typ zawartości')
  );
  $form['content_types']['nodes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Typ zawartości'),
    '#default_value' => variable_get('node_thumbs_nodes', array()),
    '#options' => array_map('check_plain', node_get_types('names')),
    '#description' => t('Wybierz z listy.'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Zapisz.'));
  return $form;
}

/**
 * Validate the node thumbnails settings form.
 */
function node_thumb_admin_validate($form, &$form_state) {
  $directory = file_directory_path() . $form_state['values']['directory'];  
  if (! file_check_directory($directory)) {
    form_set_error('directory', t('Katalog %directory nie istnieje.', array('%directory' => $directory)));
  }
}

/**
 * Handle submission of the thumbnail settings form.
 */
function node_thumb_admin_submit($form, &$form_state) {
  function not_empty($val) { return ! empty($val); };
  variable_set('node_thumbs_directory', $form_state['values']['directory']);
  variable_set('node_thumbs_promoted', array_filter($form_state['values']['promoted'], 'not_empty'));
  variable_set('node_thumbs_nodes', $form_state['values']['nodes']);
  drupal_set_message(t('Twoje ustawienia zostały zapisane.'));
}

/**
 * Adding stylesheet to form
 */
function node_thumb_add_css($form_element, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'node_thumb') .'/node_thumb.css');
  return $form_element;
}

/**
 * Implementation of hook_form_alter(). Append appropriate fields to node form.
 */
function node_thumb_form_alter(&$form, $form_state, $form_id) {    
  $node = $form['#node'];
  $nodes = variable_get('node_thumbs_nodes', array());
  
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id && $nodes[$node->type] === $node->type) {
    $form['node_thumb'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dołącz miniaturkę do treści.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE
    );
    if ($node->nid) {
      $form['node_thumb']['thumbnail'] = node_thumb_form($node, 'all', 'radios');
    } else {
      $form['node_thumb']['thumbnail'] = node_thumb_form($node, 'promoted', 'radios');
    }
    $form['#after_build'] = array_merge((array)$form['#after_build'], array('node_thumb_add_css'));
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Appends thumbnail to node.
 */
function node_thumb_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert': {
      node_thumb_save($node);      
      break;
    }
    case 'update': {
      node_thumb_delete($node);
      node_thumb_save($node);      
      break;
    }
    case 'delete': {
      node_thumb_delete($node);
      break;
    }    
    case 'load': {
      $node->thumbnail = node_thumb_load($node);      
      break;
    }
  }    
}

/**
 * Implementation of hook_perm().
 */
function node_thumb_perm() {
  return array('node thumb admin');
}

/**
 * Implementation of hook_menu().
 */
function node_thumb_menu() {
  $items['admin/settings/node_thumb'] = array(
    'title' => t('Powiązane miniaturki.'),
    'description' => t('Ustaw miniaturkę.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_thumb_admin'),
    'access callback' => 'user_access',
    'access arguments' => array('node thumb admin'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}
?>
